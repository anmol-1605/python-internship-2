import heapq

class GraphDijkstra:
    def __init__(self, vertices):
        self.V = vertices
        self.graph = {i: [] for i in range(vertices)}

    def add_edge(self, u, v, weight):
        self.graph[u].append((v, weight))
        self.graph[v].append((u, weight))

    def dijkstra(self, src):
        heap = [(0, src)]
        distances = {i: float('inf') for i in range(self.V)}
        distances[src] = 0

        while heap:
            dist, node = heapq.heappop(heap)
            for neighbor, weight in self.graph[node]:
                new_dist = dist + weight
                if new_dist < distances[neighbor]:
                    distances[neighbor] = new_dist
                    heapq.heappush(heap, (new_dist, neighbor))
        
        print(distances)

g = GraphDijkstra(5)
g.add_edge(0, 1, 10)
g.add_edge(1, 2, 20)
g.add_edge(2, 3, 30)
g.add_edge(3, 4, 40)
g.dijkstra(0)
