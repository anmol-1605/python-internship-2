class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

class BinaryTree:
    def __init__(self):
        self.root = None

    def insert(self, data):
        new_node = Node(data)
        if not self.root:
            self.root = new_node
            return
        queue = [self.root]
        while queue:
            temp = queue.pop(0)
            if not temp.left:
                temp.left = new_node
                return
            else:
                queue.append(temp.left)
            if not temp.right:
                temp.right = new_node
                return
            else:
                queue.append(temp.right)

    def get_root(self):
        return self.root


def left_view_util(root, level, max_level):
    if not root:
        return
    if max_level[0] < level:
        print(root.data, end=" ")
        max_level[0] = level
    left_view_util(root.left, level + 1, max_level)
    left_view_util(root.right, level + 1, max_level)

def left_view(root):
    max_level = [0]
    left_view_util(root, 1, max_level)


if __name__ == "__main__":
    tree = BinaryTree()
    for value in [1, 2, 3, 4, 5, 6, 7]:
        tree.insert(value)
    root = tree.get_root()
    print("Left View:")
    left_view(root)
